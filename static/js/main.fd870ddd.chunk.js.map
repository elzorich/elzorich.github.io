{"version":3,"sources":["components/TaskEdit.tsx","components/Gantt.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TaskEdit","props","useState","campaignData","changedCampaign","setChangedCampaign","handleClose","onChildClick","useEffect","timer","setTimeout","clearTimeout","changeCampaignData","value","updatedKey","Dialog","open","isOpen","onClose","aria-labelledby","className","DialogTitle","id","campaign","DialogContent","TextField","required","autoFocus","margin","label","onChange","event","currentTarget","type","fullWidth","startTime","endTime","DialogContentText","name","style","backgroundColor","color","defaultValue","DialogActions","Button","onClick","updatedTopics","produce","data","draftState","index","findIndex","topic","splice","setTopics","Gantt","setOpen","setCampaign","d3","remove","draw","w","append","attr","dateFormat","topics","contents","svg","timeScale","domain","d","range","i","length","push","distribution","reduce","acum","cur","Object","assign","n","newContent","ySide","indexOf","tasks","pageWidth","drawRects","taskArr","theGap","theTopPad","theSidePad","theBarHeight","h","selectAll","enter","rectangles","contentsBlock","Date","on","handleOpen","contentDate","text","xAxis","ticks","tickSize","call","makeGrid","barHeight","prevGap","yAxisDist","entries","b","j","vertLabels","MOCK_TOPICS","App","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fd870ddd.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { produce } from \"immer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport ColorPicker from \"material-ui-color-picker\";\r\nimport \"./TaskEdit.css\";\r\n\r\nexport interface Campaign {\r\n  campaign: string;\r\n  type: string;\r\n  startTime: string;\r\n  endTime: string;\r\n  color: string;\r\n  contents: Array<any>;\r\n}\r\n\r\ninterface TaskEditProps {\r\n  data: Campaign[];\r\n  campaignData: Campaign;\r\n  isOpen: boolean;\r\n  onChildClick: (isOpen: boolean) => void;\r\n  setTopics: (topics: Campaign[]) => void;\r\n}\r\n\r\nexport const TaskEdit = (props: TaskEditProps) => {\r\n  const [changedCampaign, setChangedCampaign] = useState<Campaign>(\r\n    props.campaignData\r\n  );\r\n\r\n  const handleClose = () => {\r\n    props.onChildClick(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let timer = setTimeout(() => setChangedCampaign(props.campaignData), 100);\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [props.campaignData]);\r\n\r\n  const saveCampaign = () => {\r\n    const updatedTopics = produce(props.data, draftState => {\r\n      const index = props.data.findIndex(\r\n        topic => topic.campaign === props?.campaignData?.campaign\r\n      );\r\n      draftState.splice(index, 1, changedCampaign);\r\n    });\r\n\r\n    props.setTopics(updatedTopics);\r\n    props.onChildClick(false);\r\n  };\r\n\r\n  const changeCampaignData = (value: string, updatedKey: keyof Campaign) => {\r\n    setChangedCampaign({ ...changedCampaign, [updatedKey]: value });\r\n  };\r\n\r\n  return (\r\n    props.campaignData && (\r\n      <div>\r\n        <Dialog\r\n          open={props.isOpen}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"form-dialog-title\"\r\n          className=\"campaign-dialog\"\r\n        >\r\n          <DialogTitle id=\"form-dialog-title\">\r\n            {props.campaignData.campaign}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <TextField\r\n              required\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"name\"\r\n              value={changedCampaign.campaign}\r\n              label={`Change the name for the ${props.campaignData.campaign} campaign`}\r\n              onChange={event =>\r\n                changeCampaignData(event.currentTarget.value, \"campaign\")\r\n              }\r\n              type=\"text\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              required\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"startDate\"\r\n              value={changedCampaign.startTime}\r\n              label=\"\"\r\n              onChange={event =>\r\n                changeCampaignData(event.currentTarget.value, \"startTime\")\r\n              }\r\n              type=\"date\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              required\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"EndDate\"\r\n              value={changedCampaign.endTime}\r\n              label=\"\"\r\n              onChange={event =>\r\n                changeCampaignData(event.currentTarget.value, \"endTime\")\r\n              }\r\n              type=\"date\"\r\n              fullWidth\r\n            />\r\n            <DialogContentText>\r\n              Pick new color for the campaign:\r\n            </DialogContentText>\r\n            <ColorPicker\r\n              className=\"color-picker\"\r\n              name=\"color\"\r\n              style={{ backgroundColor: changedCampaign.color }}\r\n              defaultValue={changedCampaign.color}\r\n              value={changedCampaign.color}\r\n              onChange={color => changeCampaignData(color, \"color\")}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={saveCampaign} color=\"primary\">\r\n              Save\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { TaskEdit, Campaign } from \"./TaskEdit\";\r\nimport \"./Gantt.css\";\r\nimport * as d3 from \"d3\";\r\n\r\ninterface IProps {\r\n  data: Campaign[];\r\n  setTopics: (topics: Campaign[]) => void;\r\n}\r\n\r\ninterface Contents {\r\n  name: string;\r\n  contentDate: string;\r\n  ySide: number;\r\n  color: string;\r\n}\r\n\r\nexport const Gantt = (props: IProps) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [campaign, setCampaign] = useState<Campaign>();\r\n\r\n  const handleOpen = (campaign: Campaign) => {\r\n    setOpen(true);\r\n    setCampaign(campaign);\r\n  };\r\n\r\n  useEffect(() => {\r\n    d3.select(\".viz > *\").remove();\r\n    draw(props.data);\r\n  }, [props.data]);\r\n\r\n  const draw = (props: Campaign[]) => {\r\n    const w = 1800;\r\n    const h = 500;\r\n    d3.select(\".viz\")\r\n      .append(\"svg\")\r\n      .attr(\"height\", h)\r\n      .attr(\"width\", w)\r\n      .attr(\"id\", \"svg-viz\");\r\n    const dateFormat = d3.timeParse(\"%Y-%m-%d\");\r\n    let topics: any[] = [];\r\n    let contents: Contents[] = [];\r\n    const svg = d3.select(\"#svg-viz\");\r\n\r\n    // Define timescale for the chart, based on the min and max date from the data\r\n    const timeScale = d3\r\n      .scaleTime()\r\n      .domain([\r\n        d3.min(props, d => dateFormat(d.startTime)) as Date,\r\n        d3.max(props, d => dateFormat(d.endTime)) as Date\r\n      ])\r\n      .range([0, w - 150]);\r\n\r\n    //Selecting unique topics from the data\r\n    for (let i = 0; i < props.length; i++) {\r\n      topics.push(props[i].type);\r\n    }\r\n\r\n    //Count number of campaigns for every topic\r\n    const distribution = topics.reduce(\r\n      (acum, cur) => Object.assign(acum, { [cur]: (acum[cur] | 0) + 1 }),\r\n      {}\r\n    );\r\n\r\n    //Add key and color property for every content for YAxis positioning and association with the topic\r\n    for (let i = 0; i < props.length; i++) {\r\n      for (let n = 0; n < props[i].contents.length; n++) {\r\n        //If user changes the color of campaign, add the same color to the content\r\n        if (props[i].contents[n].color) {\r\n          const newContent = { ...props[i].contents[n] };\r\n          newContent.color = props[i].color;\r\n          contents.push(newContent);\r\n        } else {\r\n          props[i].contents[n].ySide = props.indexOf(props[i]);\r\n          props[i].contents[n].color = props[i].color;\r\n          contents.push(props[i].contents[n]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const makeGrid = (\r\n      theSidePad: string | number,\r\n      theTopPad: number,\r\n      w: number,\r\n      h: number\r\n    ) => {\r\n      const xAxis = d3\r\n        .axisBottom(timeScale)\r\n        .ticks(d3.timeDay)\r\n        .tickSize(-h + theTopPad + 20);\r\n\r\n      const grid = svg\r\n        .append(\"g\")\r\n        .attr(\"class\", \"grid\")\r\n        .attr(\"transform\", \"translate(\" + theSidePad + \", \" + (h - 50) + \")\")\r\n        .call(xAxis)\r\n        .selectAll(\"text\")\r\n        .attr(\"fill\", \"#3da0df\")\r\n        .attr(\"font-size\", 11);\r\n    };\r\n\r\n    const vertLabels = (theGap: number, theTopPad: number) => {\r\n      let prevGap = 0;\r\n\r\n      // Data for the axis\r\n      const yAxisDist = Object.entries(distribution);\r\n      const axisText = svg\r\n        .append(\"g\")\r\n        .selectAll(\"text\")\r\n        .data(yAxisDist)\r\n        .enter()\r\n        .append(\"text\")\r\n        .text(d => d[0])\r\n        .attr(\"x\", 10)\r\n        .attr(\"y\", (d, i) => {\r\n          if (i > 0) {\r\n            const n: any = yAxisDist[i - 1][1];\r\n            const b: any = d[1];\r\n            for (let j = 0; j < i; j++) {\r\n              prevGap += n;\r\n              return (b * theGap) / 2 + prevGap * theGap + theTopPad;\r\n            }\r\n            return (b * theGap) / 2 + prevGap * theGap + theTopPad;\r\n          } else {\r\n            const c: any = d[1];\r\n            return (c * theGap) / 2 + theTopPad;\r\n          }\r\n        })\r\n        .attr(\"font-size\", 14)\r\n        .attr(\"text-anchor\", \"start\");\r\n    };\r\n\r\n    const drawRects = (\r\n      taskArr: Campaign[],\r\n      theGap: any,\r\n      theTopPad: number,\r\n      theSidePad: number,\r\n      theBarHeight: any,\r\n      w: number,\r\n      h: number\r\n    ) => {\r\n      const bigRects = svg\r\n        .append(\"g\")\r\n        .selectAll(\"rect\")\r\n        .data(taskArr)\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"x\", 0)\r\n        .attr(\"y\", (d, i) => i * theGap + theTopPad - 2)\r\n        .attr(\"width\", d => w - theSidePad / 2)\r\n        .attr(\"height\", theGap)\r\n        .attr(\"fill\", \"#3da0df\")\r\n        .attr(\"opacity\", 0.1);\r\n\r\n      const rectangles = svg\r\n        .append(\"g\")\r\n        .selectAll(\"rect\")\r\n        .data(taskArr)\r\n        .attr(\"class\", \"wrapper\")\r\n        .enter();\r\n\r\n      //Drawing campaign rectangles\r\n      const innerRects = rectangles\r\n        .append(\"rect\")\r\n        .attr(\"class\", \"campaign\")\r\n        .attr(\"rx\", 3)\r\n        .attr(\"ry\", 3)\r\n        .attr(\"x\", d => timeScale(new Date(d.startTime)) + 67)\r\n        .attr(\"y\", (d, i) => i * theGap + theTopPad)\r\n        .attr(\r\n          \"width\",\r\n          d => timeScale(new Date(d.endTime)) - timeScale(new Date(d.startTime))\r\n        )\r\n        .attr(\"height\", theBarHeight)\r\n        .attr(\"fill\", d => d.color)\r\n        .on(\"click\", d => handleOpen(d)); // passing campaign data to the state);\r\n\r\n      //Entering list of contents for every campaign\r\n      const contentsBlock = svg\r\n        .append(\"g\")\r\n        .attr(\"class\", \"contents-block\")\r\n        .selectAll(\".campaign\")\r\n        .data(contents)\r\n        .enter();\r\n\r\n      //Drawing contents rectangles\r\n      const contentsRect = contentsBlock\r\n        .append(\"rect\")\r\n        .attr(\"class\", \"content\")\r\n        .attr(\"rx\", 3)\r\n        .attr(\"ry\", 3)\r\n        .attr(\"x\", d => timeScale(new Date(d.contentDate)) + 67)\r\n        .attr(\"y\", (d, i) => d.ySide * theGap + theTopPad + theBarHeight)\r\n        .attr(\"width\", 30)\r\n        .attr(\"height\", theBarHeight)\r\n        .attr(\"stroke\", \"#fff\")\r\n        .attr(\"fill\", d => d.color);\r\n\r\n      //Inserting name of the campaign\r\n      const rectText = rectangles\r\n        .append(\"text\")\r\n        .text(d => d.campaign)\r\n        .attr(\r\n          \"x\",\r\n          d =>\r\n            (timeScale(new Date(d.endTime)) -\r\n              timeScale(new Date(d.startTime))) /\r\n              2 +\r\n            timeScale(new Date(d.startTime)) +\r\n            theSidePad\r\n        )\r\n        .attr(\"y\", (d, i) => i * theGap + 14 + theTopPad)\r\n        .attr(\"font-size\", 11)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"text-height\", theBarHeight)\r\n        .attr(\"fill\", \"#fff\");\r\n\r\n      //Inserting name of the contents\r\n      const contentText = contentsBlock\r\n        .append(\"text\")\r\n        .text(d => d.name)\r\n        .attr(\"x\", d => timeScale(new Date(d.contentDate)) + theSidePad + 12)\r\n        .attr(\"y\", d => d.ySide * theGap + 14 + theTopPad + theBarHeight)\r\n        .attr(\"font-size\", 11)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"text-height\", theBarHeight)\r\n        .attr(\"fill\", \"#fff\");\r\n    };\r\n\r\n    const makeGant = (tasks: any[], pageWidth: number, pageHeight: number) => {\r\n      const barHeight = 20;\r\n      const gap = barHeight * 2;\r\n      const topPadding = 50;\r\n      const sidePadding = 70;\r\n\r\n      makeGrid(sidePadding, topPadding, pageWidth, pageHeight);\r\n      drawRects(\r\n        tasks,\r\n        gap,\r\n        topPadding,\r\n        sidePadding,\r\n        barHeight,\r\n        pageWidth,\r\n        pageHeight\r\n      );\r\n      vertLabels(gap, topPadding);\r\n    };\r\n    makeGant(props, w, h);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"viz\" />\r\n      {campaign && (\r\n        <TaskEdit\r\n          campaignData={campaign}\r\n          data={props.data}\r\n          isOpen={open}\r\n          onChildClick={setOpen}\r\n          setTopics={props.setTopics}\r\n        />\r\n      )}\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport { Gantt } from \"./components/Gantt\";\nimport { Campaign } from \"./components/TaskEdit\";\nimport \"./App.css\";\n\nconst MOCK_TOPICS: Campaign[] = [\n  {\n    campaign: \"conceptualize\",\n    type: \"Topic1\",\n    startTime: \"2020-02-28\", //year/month/day\n    endTime: \"2020-03-01\",\n    contents: [\n      { name: \"test1\", contentDate: \"2020-02-28\" },\n      { name: \"test2\", contentDate: \"2020-02-29\" }\n    ],\n    color: \"#34a853\"\n  },\n\n  {\n    campaign: \"sketch\",\n    type: \"Topic1\",\n    startTime: \"2020-03-01\",\n    endTime: \"2020-03-06\",\n    contents: [\n      { name: \"test3\", contentDate: \"2020-03-01\" },\n      { name: \"test4\", contentDate: \"2020-03-06\" }\n    ],\n    color: \"#00bee0\"\n  },\n\n  {\n    campaign: \"color profiles\",\n    type: \"Topic1\",\n    startTime: \"2020-03-06\",\n    contents: [\n      { name: \"test5\", contentDate: \"2020-03-06\" },\n      { name: \"test6\", contentDate: \"2020-03-09\" }\n    ],\n    endTime: \"2020-03-09\",\n    color: \"#4bdc9d\"\n  },\n\n  {\n    campaign: \"TypeScript\",\n    type: \"Topic2\",\n    startTime: \"2020-03-02\",\n    endTime: \"2020-03-06\",\n    contents: [\n      { name: \"test7\", contentDate: \"2020-03-02\" },\n      { name: \"test8\", contentDate: \"2020-03-06\" }\n    ],\n    color: \"#ecc955\"\n  },\n\n  {\n    campaign: \"JS\",\n    type: \"Topic2\",\n    startTime: \"2020-03-06\",\n    endTime: \"2020-03-09\",\n    color: \"grey\",\n    contents: [\n      { name: \"test9\", contentDate: \"2020-03-06\" },\n      { name: \"test10\", contentDate: \"2020-03-09\" }\n    ]\n  },\n\n  {\n    campaign: \"Add advertising\",\n    type: \"Topic3\",\n    startTime: \"2020-03-09\",\n    endTime: \"2020-03-12\",\n    contents: [\n      { name: \"test11\", contentDate: \"2020-03-09\" },\n      { name: \"test12\", contentDate: \"2020-03-12\" }\n    ],\n    color: \"#c143c1\"\n  },\n\n  {\n    campaign: \"Google campaign\",\n    type: \"Topic3\",\n    startTime: \"2020-03-12\",\n    endTime: \"2020-03-14\",\n    color: \"#c80101\",\n    contents: [\n      { name: \"test12\", contentDate: \"2020-03-12\" },\n      { name: \"test14\", contentDate: \"2020-03-14\" }\n    ]\n  },\n  {\n    campaign: \"Deploy\",\n    type: \"Topic4\",\n    startTime: \"2020-03-08\",\n    endTime: \"2020-03-13\",\n    contents: [\n      { name: \"test15\", contentDate: \"2020-03-08\" },\n      { name: \"test16\", contentDate: \"2020-03-13\" },\n      { name: \"testY\", contentDate: \"2020-03-12\" }\n    ],\n    color: \"#4c70ea\"\n  },\n\n  {\n    campaign: \"John Reed\",\n    type: \"Topic4\",\n    startTime: \"2020-03-13\",\n    endTime: \"2020-03-16\",\n    color: \"green\",\n    contents: [\n      { name: \"test17\", contentDate: \"2020-03-13\" },\n      { name: \"test18\", contentDate: \"2020-03-16\" }\n    ]\n  }\n];\n\nfunction App() {\n  const [topics, setTopics] = useState<Campaign[]>(MOCK_TOPICS);\n\n  console.log(\"topics\", topics);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n      <h2>Gantt Project Planning</h2>\n      <Gantt data={topics} setTopics={setTopics} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}